{"version":3,"file":"static/js/37.ca771539.chunk.js","mappings":"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","sources":["pages/Dashboard.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { Link } from \"react-router-dom\";\nimport {\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  ToggleButton,\n  LinearProgress,\n  Typography,\n  AppBar,\n  Toolbar,\n  IconButton,\n  Box,\n  Skeleton,\n  Alert,\n  CircularProgress,\n} from \"@mui/material\";\nimport {\n  ArrowBack,\n  Check as CheckIcon,\n  Clear as ClearIcon,\n  Leaderboard as LeaderboardIcon,\n} from \"@mui/icons-material\";\nimport \"./Dashboard.css\"; // Import the custom CSS file\nimport { useNavigate } from \"react-router-dom\";\n\nconst Dashboard = () => {\n  const { authState } = useContext(AuthContext);\n  const [ducks, setDucks] = useState([]);\n  const [loading, setLoading] = useState(true); // State to track API call loading\n  const [foundPercentage, setFoundPercentage] = useState(0);\n  const [totalNumber, setTotalNumber] = useState(0);\n  const [foundNumber, setFoundNumber] = useState(0);\n  const [error, setError] = useState(null); // State to handle errors\n  const [toggleLoading, setToggleLoading] = useState(false); // State to prevent rapid toggling\n  const navigate = useNavigate();\n\n  // Redirect to login if no user is logged in\n  if (!authState.user) {\n    window.location.href = \"/\";\n  }\n\n  const apiBaseUrl =\n    process.env.REACT_APP_API_BASE_URL || \"https://localhost:4000\";\n\n  useEffect(() => {\n    const fetchDucks = async () => {\n      setLoading(true);\n      setError(null); // Reset error before fetching\n      try {\n        const response = await axios.get(\n          `${apiBaseUrl}/ducks/search?userId=${authState.user.selectedUser._id}`\n        );\n\n        const houseDucks = response.data;\n        setDucks(houseDucks);\n\n        // Calculate the percentage of found ducks\n        const foundDucks = houseDucks.filter((duck) => duck.found).length;\n        const percentage = (foundDucks / houseDucks.length) * 100;\n        setFoundPercentage(percentage);\n        setFoundNumber(foundDucks);\n        setTotalNumber(houseDucks.length);\n      } catch (error) {\n        console.error(\"Error fetching ducks:\", error);\n        setError(\n          \"Não foi possível carregar os dados. Por favor, contate o administrador.\"\n        );\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDucks();\n  }, [apiBaseUrl, authState.user.selectedUser._id]);\n\n  const toggleFoundState = async (duckId, found) => {\n    setToggleLoading(true);\n    try {\n      await axios.put(`${apiBaseUrl}/ducks/${duckId}`, { found });\n\n      // Update the state first\n      const updatedDucks = ducks.map((duck) =>\n        duck._id === duckId ? { ...duck, found } : duck\n      );\n      setDucks(updatedDucks);\n\n      // Calculate the percentage after updating the state\n      const foundDucks = updatedDucks.filter((duck) => duck.found).length;\n      const percentage = (foundDucks / updatedDucks.length) * 100;\n      setFoundPercentage(percentage);\n      setFoundNumber(foundDucks);\n      setTotalNumber(updatedDucks.length);\n    } catch (error) {\n      console.error(\n        `Error marking duck as ${found ? \"found\" : \"unfound\"}:`,\n        error\n      );\n      setError(\n        \"Não foi possível atualizar o status do pato. Por favor, tente novamente.\"\n      );\n    } finally {\n      setToggleLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <AppBar className=\"Appbar\" position=\"sticky\" color=\"default\">\n        <Toolbar>\n        <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"back\"\n            onClick={() => navigate(-1)}\n          >\n            <ArrowBack />\n          </IconButton>\n\n          <Typography\n            component=\"div\"\n            sx={{ flexGrow: 1, alignItems: \"center\", textAlign: \"center\" }}\n          >\n            <h2 style={{ margin: 0 }}>\n              {\" \"}\n              {authState.user.selectedUser.username} Dashboard\n            </h2>\n          </Typography>\n          <IconButton\n            edge=\"end\"\n            color=\"inherit\"\n            component={Link}\n            to=\"/ranking\"\n            aria-label=\"ranking\"\n          >\n            <LeaderboardIcon />\n          </IconButton>\n        </Toolbar>\n        <Box sx={{ paddingX: 2, paddingBottom: 2 }}>\n          <LinearProgress variant=\"determinate\" value={foundPercentage} />\n          <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {foundNumber} de {totalNumber} patos encontrados\n          </Typography>\n        </Box>\n      </AppBar>\n\n      <div className=\"container py-4\">\n        {error && (\n          <Alert severity=\"error\" sx={{ marginBottom: 2 }}>\n            {error}\n          </Alert>\n        )}\n        <List>\n          {loading\n            ? Array.from(new Array(5)).map((_, index) => (\n                <ListItem key={index} className=\"duck-list-item\">\n                  <ListItemText\n                    primary={\n                      <Skeleton variant=\"text\" width=\"40%\" height={30} />\n                    }\n                    secondary={\n                      <>\n                        <Skeleton variant=\"text\" width=\"60%\" height={20} />\n                      </>\n                    }\n                  />\n                  <ListItemSecondaryAction>\n                    <Skeleton variant=\"rectangular\" width={40} height={40} />\n                  </ListItemSecondaryAction>\n                </ListItem>\n              ))\n            : ducks.map((duck) => (\n                <ListItem key={duck._id} className=\"duck-list-item\">\n                  <ListItemText\n                    primary={<h5>Pato {duck.id}</h5>}\n                    secondary={\n                      <>\n                        <span>Tipo: {duck.type}</span>\n                      </>\n                    }\n                  />\n                  <ListItemSecondaryAction>\n                    <ToggleButton\n                      value=\"check\"\n                      selected={duck.found}\n                      onChange={() => toggleFoundState(duck._id, !duck.found)}\n                      className={\n                        duck.found\n                          ? \"toggle-button-selected\"\n                          : \"toggle-button-unselected\"\n                      }\n                      disabled={toggleLoading}\n                    >\n                      {toggleLoading ? (\n                        <CircularProgress size={24} sx={{ color: \"var(--accent-color)\" }} /> // Display a spinner inside the button\n                      ) : duck.found ? (\n                        <CheckIcon style={{ color: \"#28a745\" }} />\n                      ) : (\n                        <ClearIcon style={{ color: \"#dc3545\" }} />\n                      )}\n                    </ToggleButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              ))}\n        </List>\n      </div>\n    </>\n  );\n};\n\nexport default Dashboard;\n"],"names":["Dashboard","authState","useContext","AuthContext","ducks","setDucks","useState","loading","setLoading","foundPercentage","setFoundPercentage","totalNumber","setTotalNumber","foundNumber","setFoundNumber","error","setError","toggleLoading","setToggleLoading","navigate","useNavigate","user","window","location","href","apiBaseUrl","process","useEffect","async","houseDucks","axios","get","selectedUser","_id","data","foundDucks","filter","duck","found","length","percentage","console","fetchDucks","_jsxs","_Fragment","children","AppBar","className","position","color","Toolbar","_jsx","IconButton","edge","onClick","ArrowBack","Typography","component","sx","flexGrow","alignItems","textAlign","style","margin","username","Link","to","LeaderboardIcon","Box","paddingX","paddingBottom","LinearProgress","variant","value","align","Alert","severity","marginBottom","List","Array","from","map","_","index","ListItem","ListItemText","primary","Skeleton","width","height","secondary","ListItemSecondaryAction","id","type","ToggleButton","selected","onChange","duckId","put","updatedDucks","toggleFoundState","disabled","CircularProgress","size","CheckIcon","ClearIcon"],"sourceRoot":""}