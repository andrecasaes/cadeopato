{"version":3,"file":"static/js/790.9c8501ec.chunk.js","mappings":"6KAGA,MAwBA,EAxBoBA,IAAqD,IAApD,IAAEC,EAAG,IAAEC,EAAG,QAACC,EAAO,UAAEC,EAAS,MAAEC,EAAK,OAAEC,GAAQN,EACjE,MAAOO,EAASC,IAAcC,EAAAA,EAAAA,WAAS,GAEvC,OACEC,EAAAA,EAAAA,MAAA,OAAKN,UAAU,kBAAkBO,MAAO,CAAEC,SAAU,WAAYP,QAAOC,UAASO,SAAA,CAC7EN,IACCO,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CACPZ,QAASA,EACTE,MAAOA,EACPC,OAAQA,EACRK,MAAO,CAAEC,SAAU,WAAYI,IAAK,EAAGC,KAAM,MAGjDH,EAAAA,EAAAA,KAAA,OACEb,IAAKA,EACLC,IAAKA,EACLE,UAAWA,EACXc,OAAQA,IAAMV,GAAW,GACzBG,MAAO,CAAEQ,QAASZ,EAAU,OAAS,QAASa,aAA0B,aAAZjB,EAAyB,MAAQ,GAAIE,QAAOC,cAEtG,C,0VCVV,MA6HA,EA7HuBN,IAA4D,IAADqB,EAAAC,EAAA,IAA1D,KAAEC,EAAI,YAAEC,EAAW,KAAEC,EAAI,WAAEC,EAAU,aAAEC,GAAc3B,EAC3E,MAAO4B,EAAYC,IAAiBpB,EAAAA,EAAAA,UAAS,KACtCqB,EAAWC,IAAgBtB,EAAAA,EAAAA,WAAS,IACpCuB,EAAaC,IAAkBxB,EAAAA,EAAAA,UAASgB,IAE/CS,EAAAA,EAAAA,YAAU,KACRL,EAAc,IACdE,GAAa,GACbE,EAAeR,EAAK,GACnB,CAACA,IAuCJ,OACEX,EAAAA,EAAAA,KAACqB,EAAAA,EAAK,CACJZ,KAAMA,EACNa,QAASZ,EACT,kBAAgB,yBAChBa,GAAI,CACFlB,QAAS,OACTmB,WAAY,SACZC,eAAgB,UAChB1B,UAEFH,EAAAA,EAAAA,MAAC8B,EAAAA,EAAG,CACFH,GAAI,CACFI,QAAS,mBACTC,EAAG,EACHtB,aAAc,EACduB,UAAW,GACXC,SAAU,QACVvC,MAAO,MACPwC,UAAW,SACXjC,SAAU,YACVC,SAAA,EAEFH,EAAAA,EAAAA,MAACoC,EAAAA,EAAU,CAACC,GAAG,yBAAyB5C,QAAQ,KAAK6C,cAAY,EAAAnC,SAAA,CAAC,YAC3C,OAAXmB,QAAW,IAAXA,OAAW,EAAXA,EAAae,IACvBjC,EAAAA,EAAAA,KAACmC,EAAAA,EAAU,CACT,aAAW,SACXC,QAAS1B,EACTa,GAAI,CAAEzB,SAAU,WAAYI,IAAK,EAAGmC,MAAO,GAAItC,UAE/CC,EAAAA,EAAAA,KAACsC,EAAAA,EAAS,SAGF,OAAXpB,QAAW,IAAXA,GAAqB,QAAVX,EAAXW,EAAaqB,MAAM,UAAE,IAAAhC,GAArBA,EAAuBiC,QACtB5C,EAAAA,EAAAA,MAAA6C,EAAAA,SAAA,CAAA1C,SAAA,EACEC,EAAAA,EAAAA,KAACgC,EAAAA,EAAU,CAAC3C,QAAQ,QAAQkC,GAAI,CAAEmB,GAAI,GAAI3C,SAAC,uCAG/B,OAAXmB,QAAW,IAAXA,OAAW,EAAXA,EAAayB,SACZ3C,EAAAA,EAAAA,KAAC0B,EAAAA,EAAG,CAACH,GAAI,CAAEmB,GAAI,GAAI3C,UACjBC,EAAAA,EAAAA,KAAC4C,EAAAA,EAAW,CACVzD,IAAK,GAAGyB,KAAcM,EAAYyB,MAAME,QAAQ,MAAO,OACvDzD,IAAK,QAAQ8B,EAAYe,KACzB5C,QAAQ,cACRE,MAAM,eAMdK,EAAAA,EAAAA,MAAA6C,EAAAA,SAAA,CAAA1C,SAAA,EACEC,EAAAA,EAAAA,KAAC0B,EAAAA,EAAG,CAACH,GAAI,CAAEmB,GAAI,GAAI3C,UACjBC,EAAAA,EAAAA,KAAC8C,EAAAA,EAAa,CAAA/C,UAAa,OAAXmB,QAAW,IAAXA,GAAqB,QAAVV,EAAXU,EAAaqB,MAAM,UAAE,IAAA/B,OAAV,EAAXA,EAAuBuC,OAAQ,sCAEjD/C,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CACRC,MAAM,WACNC,MAAOpC,EACPqC,SA9FeC,IACzBrC,EAAcqC,EAAEC,OAAOH,MAAMI,cAAc,EA8FjCC,WAAS,EACTC,OAAO,SACPC,UAAQ,KAEVzD,EAAAA,EAAAA,KAAC0D,EAAAA,EAAM,CACLrE,QAAQ,YACRsE,MAAM,UACNvB,QAlGSwB,UAAa,IAADC,EAC/B,MAAMC,EAA2B,OAAX5C,QAAW,IAAXA,GAAqB,QAAV2C,EAAX3C,EAAaqB,MAAM,UAAE,IAAAsB,OAAV,EAAXA,EAAuBE,OAAOT,cACpD,GAAIxC,IAAegD,EAAe,CAChC7C,GAAa,GAEb,IACE,MAAM+C,QAAiBC,MAAM,GAAGrD,WAAoBM,EAAYqB,MAAM,GAAG2B,MAAO,CAC9EC,OAAQ,MACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAE/B,QAAQ,MAGjC,GAAIwB,EAASQ,GAAI,CACf,MAAMC,QAAoBT,EAASU,OACnC7D,EAAa4D,GAGbtD,GAAgBwD,IAAQ,IACnBA,EACHpC,MAAOoC,EAASpC,MAAMqC,KAAK7B,GACzBA,EAAKmB,MAAQO,EAAYP,IAAMO,EAAc1B,OAGnD,CACF,CAAE,MAAO8B,GACPC,QAAQD,MAAM,+BAAgCA,EAChD,CACF,MACE5D,GAAa,GACb8D,MAAM,uCACR,EAqEUxD,GAAI,CAAEyD,GAAI,GAAIjF,SACf,2BAMD,EC8HZ,EAtOkBkF,KAChB,MAAM,UAAEC,IAAcC,EAAAA,EAAAA,YAAWC,EAAAA,IAC1BC,EAAOC,IAAY3F,EAAAA,EAAAA,UAAS,KAC5BF,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChC4F,EAAiBC,IAAsB7F,EAAAA,EAAAA,UAAS,IAChD8F,EAAaC,IAAkB/F,EAAAA,EAAAA,UAAS,IACxCgG,EAAaC,IAAkBjG,EAAAA,EAAAA,UAAS,IACxCkF,EAAOgB,IAAYlG,EAAAA,EAAAA,UAAS,OAC5BmG,EAAeC,IAAoBpG,EAAAA,EAAAA,WAAS,IAC5CqG,EAAcC,IAAmBtG,EAAAA,EAAAA,UAAS,OAC1CuG,EAAaC,IAAkBxG,EAAAA,EAAAA,WAAS,GACzCyG,GAAWC,EAAAA,EAAAA,MAGZnB,EAAUoB,OACbC,OAAOC,SAASC,KAAO,KAGzB,MAAM7F,EACJ8F,gCA6BFtF,EAAAA,EAAAA,YAAU,KA3BSwC,WACjBlE,GAAW,GACXmG,EAAS,MACT,IACE,MAIMc,SAJiBC,EAAAA,EAAMC,IAC3B,GAAGjG,yBAAkCsE,EAAUoB,KAAKQ,aAAa5C,QAGvC6C,KAC5BzB,EAASqB,GAGT,MAAMK,EAAaL,EAAWM,QAAQtG,GAASA,EAAKuG,QAAOC,OACrDC,EAAcJ,EAAaL,EAAWQ,OAAU,IACtD3B,EAAmB4B,GACnBxB,EAAeoB,GACftB,EAAeiB,EAAWQ,OAC5B,CAAE,MAAOtC,GACPC,QAAQD,MAAM,wBAAyBA,GACvCgB,EACE,gFAEJ,CAAC,QACCnG,GAAW,EACb,GAIA2H,EAAY,GACX,CAACzG,EAAYsE,EAAUoB,KAAKQ,aAAa5C,MAwD5C,OACEtE,EAAAA,EAAAA,MAAA6C,EAAAA,SAAA,CAAA1C,SAAA,EACEH,EAAAA,EAAAA,MAAC0H,EAAAA,EAAM,CAAChI,UAAU,SAASQ,SAAS,SAAS6D,MAAM,UAAS5D,SAAA,EAC1DH,EAAAA,EAAAA,MAAC2H,EAAAA,EAAO,CAAAxH,SAAA,EACNC,EAAAA,EAAAA,KAACmC,EAAAA,EAAU,CACTqF,KAAK,QACL7D,MAAM,UACN,aAAW,OACXvB,QAASA,IAAMgE,GAAU,GAAGrG,UAE5BC,EAAAA,EAAAA,KAACyH,EAAAA,EAAS,OAGZzH,EAAAA,EAAAA,KAACgC,EAAAA,EAAU,CACT0F,UAAU,MACVnG,GAAI,CAAEoG,SAAU,EAAGnG,WAAY,SAAUO,UAAW,UAAWhC,UAE/DH,EAAAA,EAAAA,MAAA,MAAIC,MAAO,CAAE2D,OAAQ,GAAIzD,SAAA,CACtBmF,EAAUoB,KAAKQ,aAAac,SAAS,mBAG1C5H,EAAAA,EAAAA,KAACmC,EAAAA,EAAU,CACTqF,KAAK,MACL7D,MAAM,UACN+D,UAAWG,EAAAA,GACXC,GAAG,WACH,aAAW,UAAS/H,UAEpBC,EAAAA,EAAAA,KAAC+H,EAAAA,EAAe,UAGpBnI,EAAAA,EAAAA,MAAC8B,EAAAA,EAAG,CAACH,GAAI,CAAEyG,SAAU,EAAGC,cAAe,GAAIlI,SAAA,EACzCC,EAAAA,EAAAA,KAACkI,EAAAA,EAAc,CAAC7I,QAAQ,cAAc6D,MAAOqC,KAC7C3F,EAAAA,EAAAA,MAACoC,EAAAA,EAAU,CAAC3C,QAAQ,QAAQsE,MAAM,gBAAgBwE,MAAM,SAAQpI,SAAA,CAC7D4F,EAAY,OAAKF,EAAY,+BAKpC7F,EAAAA,EAAAA,MAAA,OAAKN,UAAU,iBAAgBS,SAAA,CAC5B8E,IACC7E,EAAAA,EAAAA,KAACoI,EAAAA,EAAK,CAACC,SAAS,QAAQ9G,GAAI,CAAE+G,aAAc,GAAIvI,SAC7C8E,KAGL7E,EAAAA,EAAAA,KAACuI,EAAAA,EAAI,CAAAxI,SACFN,EACG+I,MAAMC,KAAK,IAAID,MAAM,IAAI5D,KAAI,CAAC8D,EAAGC,KAC/B/I,EAAAA,EAAAA,MAACgJ,EAAAA,GAAQ,CAAatJ,UAAU,iBAAgBS,SAAA,EAC9CC,EAAAA,EAAAA,KAAC6I,EAAAA,EAAY,CACXC,SACE9I,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CAACZ,QAAQ,OAAOE,MAAM,MAAMC,OAAQ,KAE/CuJ,WACE/I,EAAAA,EAAAA,KAAAyC,EAAAA,SAAA,CAAA1C,UACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CAACZ,QAAQ,OAAOE,MAAM,MAAMC,OAAQ,UAInDQ,EAAAA,EAAAA,KAACgJ,EAAAA,EAAuB,CAAAjJ,UACtBC,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CAACZ,QAAQ,cAAcE,MAAO,GAAIC,OAAQ,SAZxCmJ,KAgBjBtD,EAAMT,KAAKjE,IACTf,EAAAA,EAAAA,MAACgJ,EAAAA,GAAQ,CAEPtJ,UAAU,iBACV2J,QAAM,EACN7G,QAASA,IA7FCzB,KACxBsF,EAAgBtF,GAChBwF,GAAe,EAAK,EA2FS+C,CAAiBvI,GAAMZ,SAAA,EAEtCC,EAAAA,EAAAA,KAAC6I,EAAAA,EAAY,CACXC,SAASlJ,EAAAA,EAAAA,MAAA,MAAAG,SAAA,CAAI,QAAMY,EAAKsB,MACxB8G,WAAWnJ,EAAAA,EAAAA,MAAA,QAAAG,SAAA,CAAM,SAAOY,EAAKwI,WAE/BnJ,EAAAA,EAAAA,KAACgJ,EAAAA,EAAuB,CAAAjJ,UACtBC,EAAAA,EAAAA,KAACoJ,EAAAA,EAAY,CACXlG,MAAM,QACNmG,SAAU1I,EAAKuG,MACf/D,SAAWC,IACTA,EAAEkG,kBAtIC1F,OAAO2F,EAAQrC,KACtCnB,GAAiB,GACjB,UACQa,EAAAA,EAAM4C,IAAI,GAAG5I,WAAoB2I,IAAU,CAAErC,UAGnD,MAAMuC,EAAepE,EAAMT,KAAKjE,GAC9BA,EAAKuD,MAAQqF,EAAS,IAAK5I,EAAMuG,SAAUvG,IAE7C2E,EAASmE,GAGT,MAAMzC,EAAayC,EAAaxC,QAAQtG,GAASA,EAAKuG,QAAOC,OACvDC,EAAcJ,EAAayC,EAAatC,OAAU,IACxD3B,EAAmB4B,GACnBxB,EAAeoB,GACftB,EAAe+D,EAAatC,OAC9B,CAAE,MAAOtC,GACPC,QAAQD,MACN,yBAAyBqC,EAAQ,QAAU,aAC3CrC,GAEFgB,EACE,iFAEJ,CAAC,QACCE,GAAiB,EACnB,GA4GoB2D,CAAiB/I,EAAKuD,KAAMvD,EAAKuG,MAAM,EAEzC5H,UACEqB,EAAKuG,MACD,yBACA,2BAENyC,SAAU7D,EAAc/F,SAEvB+F,GACC9F,EAAAA,EAAAA,KAAC4J,EAAAA,EAAgB,CACfC,KAAM,GACNtI,GAAI,CAAEoC,MAAO,yBAEbhD,EAAKuG,OACPlH,EAAAA,EAAAA,KAAC8J,EAAAA,EAAS,CAACjK,MAAO,CAAE8D,MAAO,cAE3B3D,EAAAA,EAAAA,KAAC+J,EAAAA,EAAS,CAAClK,MAAO,CAAE8D,MAAO,mBAhC5BhD,EAAKuD,aAyCtBlE,EAAAA,EAAAA,KAACgK,EAAc,CACbvJ,KAAMyF,EACNxF,YAhImBuJ,KACvBhE,EAAgB,MAChBE,GAAe,EAAM,EA+HjBxF,KAAMqF,EACNpF,WAAYA,EACZC,aAAe4D,IA9HGyF,KACtB,MAAMT,EAAepE,EAAMT,KAAKuF,GAC9BA,EAAEjG,MAAQgG,EAAYhG,IAAMgG,EAAcC,IAE5C7E,EAASmE,GAGT,MAAMzC,EAAayC,EAAaxC,QAAQtG,GAASA,EAAKuG,QAAOC,OACvDC,EAAcJ,EAAayC,EAAatC,OAAU,IACxD3B,EAAmB4B,GACnBxB,EAAeoB,GACftB,EAAe+D,EAAatC,OAAO,EAwH7BiD,CAJoB,IACfpE,EACHzD,MAAO,CAACkC,IAEiB,MAG9B,C","sources":["components/ImageLoader.js","components/SolveClueModal.js","pages/Dashboard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Skeleton from '@mui/material/Skeleton';\n\nconst ImageLoader = ({ src, alt,variant, className, width, height }) => {\n  const [loading, setLoading] = useState(true);\n\n  return (\n    <div className=\"image-container\" style={{ position: 'relative', width, height }}>\n      {loading && (\n        <Skeleton\n          variant={variant}\n          width={width}\n          height={height}\n          style={{ position: 'absolute', top: 0, left: 0 }}\n        />\n      )}\n      <img\n        src={src}\n        alt={alt}\n        className={className}\n        onLoad={() => setLoading(false)}\n        style={{ display: loading ? 'none' : 'block', borderRadius: variant === 'circular' ? '50%' : '', width, height }}\n      />\n    </div>\n  );\n};\n\nexport default ImageLoader;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Modal,\n  Box,\n  Typography,\n  IconButton,\n  TextField,\n  Button,\n} from \"@mui/material\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport ReactMarkdown from \"react-markdown\";\nimport ImageLoader from \"./ImageLoader\";\n\nconst SolveClueModal = ({ open, handleClose, duck, apiBaseUrl, onClueSolved }) => {\n  const [userAnswer, setUserAnswer] = useState(\"\");\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [currentDuck, setCurrentDuck] = useState(duck);\n\n  useEffect(() => {\n    setUserAnswer(\"\");\n    setIsCorrect(false);\n    setCurrentDuck(duck);\n  }, [duck]);\n\n  const handleInputChange = (e) => {\n    setUserAnswer(e.target.value.toUpperCase());\n  };\n\n  const handleSubmit = async () => {\n    const correctAnswer = currentDuck?.clues[0]?.answer.toUpperCase();\n    if (userAnswer === correctAnswer) {\n      setIsCorrect(true);\n\n      try {\n        const response = await fetch(`${apiBaseUrl}/clues/${currentDuck.clues[0]._id}`, {\n          method: \"PUT\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ solved: true }),\n        });\n\n        if (response.ok) {\n          const updatedClue = await response.json();\n          onClueSolved(updatedClue);\n\n          // Update the current duck state with the solved clue\n          setCurrentDuck((prevDuck) => ({\n            ...prevDuck,\n            clues: prevDuck.clues.map((clue) =>\n              clue._id === updatedClue._id ? updatedClue : clue\n            ),\n          }));\n        }\n      } catch (error) {\n        console.error(\"Erro ao atualizar a charada:\", error);\n      }\n    } else {\n      setIsCorrect(false);\n      alert(\"Resposta incorreta, tente novamente.\");\n    }\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"solve-clue-modal-title\"\n      sx={{\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      <Box\n        sx={{\n          bgcolor: \"background.paper\",\n          p: 4,\n          borderRadius: 1,\n          boxShadow: 24,\n          maxWidth: \"600px\",\n          width: \"90%\",\n          textAlign: \"center\",\n          position: \"relative\",\n        }}\n      >\n        <Typography id=\"solve-clue-modal-title\" variant=\"h6\" gutterBottom>\n          Charada #{currentDuck?.id}\n          <IconButton\n            aria-label=\"fechar\"\n            onClick={handleClose}\n            sx={{ position: \"absolute\", top: 8, right: 8 }}\n          >\n            <CloseIcon />\n          </IconButton>\n        </Typography>\n        {currentDuck?.clues[0]?.solved ? (\n          <>\n            <Typography variant=\"body1\" sx={{ mb: 3 }}>\n              Esta charada já foi resolvida.\n            </Typography>\n            {currentDuck?.photo && (\n              <Box sx={{ mb: 3 }}>\n                <ImageLoader\n                  src={`${apiBaseUrl}/${currentDuck.photo.replace(/\\\\/g, \"/\")}`}\n                  alt={`Pato ${currentDuck.id}`}\n                  variant=\"rectangular\"\n                  width=\"100%\"\n                />\n              </Box>\n            )}\n          </>\n        ) : (\n          <>\n            <Box sx={{ mb: 3 }}>\n              <ReactMarkdown>{currentDuck?.clues[0]?.clue || \"Nenhuma charada disponível.\"}</ReactMarkdown>\n            </Box>\n            <TextField\n              label=\"Resposta\"\n              value={userAnswer}\n              onChange={handleInputChange}\n              fullWidth\n              margin=\"normal\"\n              required\n            />\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleSubmit}\n              sx={{ mt: 2 }}\n            >\n              Enviar Resposta\n            </Button>\n          </>\n        )}\n      </Box>\n    </Modal>\n  );\n};\n\nexport default SolveClueModal;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { Link } from \"react-router-dom\";\nimport {\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  ToggleButton,\n  LinearProgress,\n  Typography,\n  AppBar,\n  Toolbar,\n  IconButton,\n  Box,\n  Skeleton,\n  Alert,\n  CircularProgress,\n} from \"@mui/material\";\nimport {\n  ArrowBack,\n  Check as CheckIcon,\n  Clear as ClearIcon,\n  Leaderboard as LeaderboardIcon,\n} from \"@mui/icons-material\";\nimport { useNavigate } from \"react-router-dom\";\nimport SolveClueModal from \"../components/SolveClueModal\";\nimport \"./Dashboard.css\"; // Import the custom CSS file\n\nconst Dashboard = () => {\n  const { authState } = useContext(AuthContext);\n  const [ducks, setDucks] = useState([]);\n  const [loading, setLoading] = useState(true); // State to track API call loading\n  const [foundPercentage, setFoundPercentage] = useState(0);\n  const [totalNumber, setTotalNumber] = useState(0);\n  const [foundNumber, setFoundNumber] = useState(0);\n  const [error, setError] = useState(null); // State to handle errors\n  const [toggleLoading, setToggleLoading] = useState(false); // State to prevent rapid toggling\n  const [selectedDuck, setSelectedDuck] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const navigate = useNavigate();\n\n  // Redirect to login if no user is logged in\n  if (!authState.user) {\n    window.location.href = \"/\";\n  }\n\n  const apiBaseUrl =\n    process.env.REACT_APP_API_BASE_URL || \"https://localhost:4000\";\n\n  const fetchDucks = async () => {\n    setLoading(true);\n    setError(null); // Reset error before fetching\n    try {\n      const response = await axios.get(\n        `${apiBaseUrl}/ducks/search?userId=${authState.user.selectedUser._id}`\n      );\n\n      const houseDucks = response.data;\n      setDucks(houseDucks);\n\n      // Calculate the percentage of found ducks\n      const foundDucks = houseDucks.filter((duck) => duck.found).length;\n      const percentage = (foundDucks / houseDucks.length) * 100;\n      setFoundPercentage(percentage);\n      setFoundNumber(foundDucks);\n      setTotalNumber(houseDucks.length);\n    } catch (error) {\n      console.error(\"Error fetching ducks:\", error);\n      setError(\n        \"Não foi possível carregar os dados. Por favor, contate o administrador.\"\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchDucks();\n  }, [apiBaseUrl, authState.user.selectedUser._id]);\n\n  const toggleFoundState = async (duckId, found) => {\n    setToggleLoading(true);\n    try {\n      await axios.put(`${apiBaseUrl}/ducks/${duckId}`, { found });\n\n      // Update the state first\n      const updatedDucks = ducks.map((duck) =>\n        duck._id === duckId ? { ...duck, found } : duck\n      );\n      setDucks(updatedDucks);\n\n      // Calculate the percentage after updating the state\n      const foundDucks = updatedDucks.filter((duck) => duck.found).length;\n      const percentage = (foundDucks / updatedDucks.length) * 100;\n      setFoundPercentage(percentage);\n      setFoundNumber(foundDucks);\n      setTotalNumber(updatedDucks.length);\n    } catch (error) {\n      console.error(\n        `Error marking duck as ${found ? \"found\" : \"unfound\"}:`,\n        error\n      );\n      setError(\n        \"Não foi possível atualizar o status do pato. Por favor, tente novamente.\"\n      );\n    } finally {\n      setToggleLoading(false);\n    }\n  };\n\n  const handleDuckSelect = (duck) => {\n    setSelectedDuck(duck);\n    setIsModalOpen(true);\n  };\n\n  const handleModalClose = () => {\n    setSelectedDuck(null);\n    setIsModalOpen(false);\n  };\n\n  const updateDuckData = (updatedDuck) => {\n    const updatedDucks = ducks.map((d) =>\n      d._id === updatedDuck._id ? updatedDuck : d\n    );\n    setDucks(updatedDucks);\n\n    // Recalculate percentages\n    const foundDucks = updatedDucks.filter((duck) => duck.found).length;\n    const percentage = (foundDucks / updatedDucks.length) * 100;\n    setFoundPercentage(percentage);\n    setFoundNumber(foundDucks);\n    setTotalNumber(updatedDucks.length);\n  };\n\n  return (\n    <>\n      <AppBar className=\"Appbar\" position=\"sticky\" color=\"default\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"back\"\n            onClick={() => navigate(-1)}\n          >\n            <ArrowBack />\n          </IconButton>\n\n          <Typography\n            component=\"div\"\n            sx={{ flexGrow: 1, alignItems: \"center\", textAlign: \"center\" }}\n          >\n            <h2 style={{ margin: 0 }}>\n              {authState.user.selectedUser.username} Dashboard\n            </h2>\n          </Typography>\n          <IconButton\n            edge=\"end\"\n            color=\"inherit\"\n            component={Link}\n            to=\"/ranking\"\n            aria-label=\"ranking\"\n          >\n            <LeaderboardIcon />\n          </IconButton>\n        </Toolbar>\n        <Box sx={{ paddingX: 2, paddingBottom: 2 }}>\n          <LinearProgress variant=\"determinate\" value={foundPercentage} />\n          <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {foundNumber} de {totalNumber} patos encontrados\n          </Typography>\n        </Box>\n      </AppBar>\n\n      <div className=\"container py-4\">\n        {error && (\n          <Alert severity=\"error\" sx={{ marginBottom: 2 }}>\n            {error}\n          </Alert>\n        )}\n        <List>\n          {loading\n            ? Array.from(new Array(5)).map((_, index) => (\n                <ListItem key={index} className=\"duck-list-item\">\n                  <ListItemText\n                    primary={\n                      <Skeleton variant=\"text\" width=\"40%\" height={30} />\n                    }\n                    secondary={\n                      <>\n                        <Skeleton variant=\"text\" width=\"60%\" height={20} />\n                      </>\n                    }\n                  />\n                  <ListItemSecondaryAction>\n                    <Skeleton variant=\"rectangular\" width={40} height={40} />\n                  </ListItemSecondaryAction>\n                </ListItem>\n              ))\n            : ducks.map((duck) => (\n                <ListItem\n                  key={duck._id}\n                  className=\"duck-list-item\"\n                  button\n                  onClick={() => handleDuckSelect(duck)}\n                >\n                  <ListItemText\n                    primary={<h5>Pato {duck.id}</h5>}\n                    secondary={<span>Tipo: {duck.type}</span>}\n                  />\n                  <ListItemSecondaryAction>\n                    <ToggleButton\n                      value=\"check\"\n                      selected={duck.found}\n                      onChange={(e) => {\n                        e.stopPropagation();\n                        toggleFoundState(duck._id, !duck.found);\n                      }}\n                      className={\n                        duck.found\n                          ? \"toggle-button-selected\"\n                          : \"toggle-button-unselected\"\n                      }\n                      disabled={toggleLoading}\n                    >\n                      {toggleLoading ? (\n                        <CircularProgress\n                          size={24}\n                          sx={{ color: \"var(--accent-color)\" }}\n                        />\n                      ) : duck.found ? (\n                        <CheckIcon style={{ color: \"#28a745\" }} />\n                      ) : (\n                        <ClearIcon style={{ color: \"#dc3545\" }} />\n                      )}\n                    </ToggleButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              ))}\n        </List>\n      </div>\n\n      <SolveClueModal\n        open={isModalOpen}\n        handleClose={handleModalClose}\n        duck={selectedDuck}\n        apiBaseUrl={apiBaseUrl}\n        onClueSolved={(updatedClue) => {\n          const updatedDuck = {\n            ...selectedDuck,\n            clues: [updatedClue],\n          };\n          updateDuckData(updatedDuck);\n        }}\n      />\n    </>\n  );\n};\n\nexport default Dashboard;\n"],"names":["_ref","src","alt","variant","className","width","height","loading","setLoading","useState","_jsxs","style","position","children","_jsx","Skeleton","top","left","onLoad","display","borderRadius","_currentDuck$clues$2","_currentDuck$clues$3","open","handleClose","duck","apiBaseUrl","onClueSolved","userAnswer","setUserAnswer","isCorrect","setIsCorrect","currentDuck","setCurrentDuck","useEffect","Modal","onClose","sx","alignItems","justifyContent","Box","bgcolor","p","boxShadow","maxWidth","textAlign","Typography","id","gutterBottom","IconButton","onClick","right","CloseIcon","clues","solved","_Fragment","mb","photo","ImageLoader","replace","ReactMarkdown","clue","TextField","label","value","onChange","e","target","toUpperCase","fullWidth","margin","required","Button","color","async","_currentDuck$clues$","correctAnswer","answer","response","fetch","_id","method","headers","body","JSON","stringify","ok","updatedClue","json","prevDuck","map","error","console","alert","mt","Dashboard","authState","useContext","AuthContext","ducks","setDucks","foundPercentage","setFoundPercentage","totalNumber","setTotalNumber","foundNumber","setFoundNumber","setError","toggleLoading","setToggleLoading","selectedDuck","setSelectedDuck","isModalOpen","setIsModalOpen","navigate","useNavigate","user","window","location","href","process","houseDucks","axios","get","selectedUser","data","foundDucks","filter","found","length","percentage","fetchDucks","AppBar","Toolbar","edge","ArrowBack","component","flexGrow","username","Link","to","LeaderboardIcon","paddingX","paddingBottom","LinearProgress","align","Alert","severity","marginBottom","List","Array","from","_","index","ListItem","ListItemText","primary","secondary","ListItemSecondaryAction","button","handleDuckSelect","type","ToggleButton","selected","stopPropagation","duckId","put","updatedDucks","toggleFoundState","disabled","CircularProgress","size","CheckIcon","ClearIcon","SolveClueModal","handleModalClose","updatedDuck","d","updateDuckData"],"sourceRoot":""}